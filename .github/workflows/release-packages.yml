name: Release Packages

on:
  push:
    branches: 
    - hardening
  pull_request:
    types: [closed]
    branches:
    - main

jobs:
  release:
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Validate packages
      run: |
        echo "🔍 Validating packages before release..."
        python validate_packages.py
        echo "✅ Package validation passed!"
        
    - name: Build modules zip
      run: |
        python release_packages.py
        
    - name: Verify packages.zip exists
      run: |
        if [ ! -f "packages.zip" ]; then
          echo "Error: packages.zip was not created"
          exit 1
        fi
        echo "packages.zip created successfully"
        
    - name: List modules directory contents
      run: |
        echo "=== MODULES DIRECTORY CONTENTS ==="
        find modules -type f | head -20
        echo "Total files in modules: $(find modules -type f | wc -l)"
        echo "=================================="
        
    - name: Verify zip contents
      run: |
        echo "=== ZIP FILE CONTENTS ==="
        unzip -l packages.zip | head -20
        echo "Total files in zip: $(unzip -l packages.zip | tail -1 | awk '{print $2}')"
        echo "=========================="
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Create Formatted Tag
      run: |
        # Create a formatted tag with YYYY-MM-DD-short-hash
        CURRENT_DATE=$(date +%Y-%m-%d)
        SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
        FORMATTED_TAG="${CURRENT_DATE}-${SHORT_HASH}"
        echo "formatted_tag=$FORMATTED_TAG" >> $GITHUB_OUTPUT
        echo "📅 Formatted tag: $FORMATTED_TAG"
        
        # Create the formatted tag pointing to the current commit
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag $FORMATTED_TAG ${{ github.sha }}
        git push origin $FORMATTED_TAG
        echo "🏷️ Created formatted tag: $FORMATTED_TAG"
        
    - name: Update Latest Tag
      run: |
        # Always update the "latest" tag to point to the current commit
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -f latest ${{ github.sha }}
        git push origin latest --force
        echo "🏷️ 'latest' tag updated to point to current commit"
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages.zip
        asset_name: packages.zip
        asset_content_type: application/zip
        
    - name: Verify Release Success
      run: |
        echo "✅ Release created successfully!"
        echo "Tag: ${{ github.run_number }}"
        echo "Formatted Tag: ${{ steps.create_formatted_tag.outputs.formatted_tag }}"
        echo "Release ID: ${{ steps.create_release.outputs.id }}"
        echo "Asset uploaded: packages.zip"
        echo ""
        echo "📝 Release created with formatted tag: ${{ steps.create_formatted_tag.outputs.formatted_tag }}"
        echo "   'latest' tag updated to point to current commit"
        
    - name: Update Release Name
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Update the release name to include "Latest" indicator
        gh api repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
          -f name="Release ${{ steps.create_formatted_tag.outputs.formatted_tag }} (Latest)"
        echo "📝 Release name updated to include 'Latest' indicator"
