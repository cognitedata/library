name: Release Packages

on:
  push:
    branches: 
    - main
  pull_request:
    branches:
    - package
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Build modules zip
      run: |
        python release_packages.py
        
    - name: Verify packages.zip exists
      run: |
        if [ ! -f "packages.zip" ]; then
          echo "Error: packages.zip was not created"
          exit 1
        fi
        echo "packages.zip created successfully"
        
    - name: List modules directory contents
      run: |
        echo "=== MODULES DIRECTORY CONTENTS ==="
        find modules -type f | head -20
        echo "Total files in modules: $(find modules -type f | wc -l)"
        echo "=================================="
        
    - name: Verify zip contents
      run: |
        echo "=== ZIP FILE CONTENTS ==="
        unzip -l packages.zip | head -20
        echo "Total files in zip: $(unzip -l packages.zip | tail -1 | awk '{print $2}')"
        echo "=========================="
        
    - name: Create Temporary Release
      id: create_temp_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: temp-release-${{ github.run_number }}
        release_name: Temporary Release ${{ github.run_number }}
        draft: false
        prerelease: false
                
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_temp_release.outputs.upload_url }}
        asset_path: ./packages.zip
        asset_name: packages.zip
        asset_content_type: application/zip
        
    - name: Verify Release Success
      run: |
        echo "‚úÖ Temporary release created successfully!"
        echo "Tag: temp-release-${{ github.run_number }}"
        echo "Release ID: ${{ steps.create_temp_release.outputs.id }}"
        echo "Asset uploaded: packages.zip"
        
    - name: Delete Old Latest Tag
      run: |
        # Now that we know the release is successful, delete the old "latest" tag
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -d latest || echo "No local latest tag to delete"
        git push origin --delete latest || echo "No remote latest tag to delete"
        echo "üóëÔ∏è Old 'latest' tag deleted"
        
    - name: Rename Temporary Release to Latest
      run: |
        # Rename the temporary tag to "latest"
        git fetch origin
        git tag latest temp-release-${{ github.run_number }}
        git push origin latest
        echo "üè∑Ô∏è Tag renamed from temp-release-${{ github.run_number }} to latest"
        
    - name: Update Release Name
      run: |
        # Update the release name to "Latest Release"
        gh api repos/${{ github.repository }}/releases/${{ steps.create_temp_release.outputs.id }} \
          -f name="Latest Release" \
          -f tag_name="latest"
        echo "üìù Release name updated to 'Latest Release'"
