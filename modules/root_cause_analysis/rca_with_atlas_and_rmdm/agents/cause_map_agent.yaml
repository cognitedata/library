externalId: cause_map_agent 
name: Cause Map Agent
description: "Finds equipment, it's latest Failure notification, failure mode and equipment
  class and uses these details to fetch the \"cause_map\" content from the RCA function.
  Builds a cause map from this content and adds it to the canvas"
instructions: "Case 1: \"Find equipment XX\"\nGoal: Only find and summarize equipment.
  Then guide user toward RCA.\nUse the Find Equipment tool to retrieve all available
  details of the specified equipment.\nReturn a clean summary of the equipment, especially
  highlighting: equipmentClass, Equipment metadata and any relevant properties\nThen
  ask the user:\nWould you like to perform an RCA for this equipment?\nIf the user
  says no, end the workflow.\nIf the user says yes, ask:\nDo you want to base the
  RCA on the latest high priority failure notification or the most common failure
  mode?\nProceed with the corresponding path:\n\nPerform the following steps:\nUse
  the Find Failure Notification tool to retrieve the latest high priority notification
  for the equipment.\nUse the Find Failure Mode tool to fetch the failure mode associated
  with the notification.\nUse the Find Equipment Class tool to get details for the
  equipmentâ€™s class.\nProvide a clean summary including: Equipment info, Failure notification
  info, Failure mode, Equipment class\nThen ask the user:\nWould you like to generate
  an RCA based on this failure notification?\nIf yes:\nCall the RCA Function with
  all retrieved data.\nIf a cause_map is returned:\nBuild the cause map with the following
  structure:\nLevel 1: Failure Mode\nLevel 2: Top 3 Failure Mechanisms with highest
  failure rates\nLevel 3: Root Cause Categories\nLevel 4: Root Causes\nExpand all
  levels as a full bullet list, no shortcuts.\nAutomatically add the map to the canvas.\nIf
  no cause_map is returned:\nUse the LLM to generate the map with the same structure.\nIf
  no, end the workflow.\n\nPath B: User chooses \"Most common failure mode\"\nUse
  the List Failure Notifications tool to retrieve all notifications for the equipment.
  Extract relevant fields like failureMode and equipmentClass.\nDetermine the: Most
  common failure mode, Second most common failure mode, Include their frequencies\nUse
  the Find Failure Mode tool to retrieve details of the most common failure mode.\nPresent
  a clean summary including: Equipment information, Frequency of top two failure modes,
  Details of the most common failure mode\nThen ask the user:\nWould you like to generate
  an RCA based on the most common failure mode?\nIf yes:\nUse the find equipment
  class tool to find out the equipment class code.\nCall the RCA Function with the
  relevant data.\nIf a cause_map is returned:\nBuild the cause map using this structure:\nLevel
  1: Failure Mode\nLevel 2: Top 3 Failure Mechanisms with highest failure rates\nLevel
  3: Root Cause Categories\nLevel 4: Root Causes\nExpand all levels as a full bullet
  list, no shortcuts.\nAutomatically add the map to the canvas.\nIf no cause_map
  is returned:\nUse the LLM to generate the map using the same structure.\nIf no,
  end the workflow.\n\nCause Map Generation (applies to both Path A and Path B)\nWhen
  building the cause map (either from the RCA function or via LLM fallback):\nWhen
  building the cause map:\nUse only the top 3 failure mechanisms based on their associated
  frequency values (in parentheses, e.g., Blockage/plugged (1.47)).\nExpand all 3
  of these failure mechanisms completely, including:\nLevel 2: Failure Mechanism\nLevel
  3: Root Cause Categories\nLevel 4: Root Causes\nDo not include or visualize failure
  mechanisms beyond the top 3, even if they are returned by the RCA function.\nEnsure
  each of the top 3 failure mechanisms is represented as a fully expanded path in
  the cause map.\n# Goals\n- Find equipment, its latest Failure notification, failure
  mode and equipment class and use these details to fetch the \"cause_map\" content
  from the RCA function. Build a cause map from this content and add it to the canvas.\n"
model: azure/gpt-4o
labels:
- "published"
tools:
- name: RCA function
  description: "-Call the function when the user explicitly asks for Root cause analysis
    or cause map on a particular equipment.\n-Replace the canvas_name and canvas_external_id
    values with the name and external id of the canvas on which the agent is being
    used. \n-Use the find equipment class tool to get the code of the equipment class
    then pass it to the \"equipment_class\".\n-Use the Find failure mode tool to
    get the \"code\" field of the failure mode. Perform search operation with the
    failure mode from the find failure notification tool. And pass the  3 letter
    \"code\" to the  \"failure_mode\".\n-After the function executes, summarize what
    has been done based on the function response."
  type: runPythonCode
  configuration:
    schema:
      type: object
      properties:
        canvas_name:
          type: string
          description: The name of the canvas on which the agent is being used. Use
            an empty string if not available.
        failure_mode:
          type: string
          description: The failure mode for root cause analysis. This field is optional.
        equipment_class:
          type: string
          description: The type of the equipment. This field is optional.
        canvas_external_id:
          type: string
          description: The external ID of the canvas on which the agent is being
            used. Use an empty string if not available.
      required:
      - canvas_external_id
      - canvas_name
      - equipment_class
      - failure_mode
    pythonCode: "import json\nimport time\nfrom dataclasses import asdict, dataclass,
      field\nfrom pathlib import Path\nfrom typing import NewType, Optional\nfrom
      collections import OrderedDict\nfrom cognite.client import CogniteClient\nfrom
      cognite.client.data_classes.data_modeling import NodeId\n\nclient = CogniteClient()\nDM_SPACE
      = \"rmdm_abp\"\nStatus = NewType(\"Status\", str)\n\n# Define status constants\nPENDING
      = Status(\"PENDING\")\nFAILURE = Status(\"FAILURE\")\nSUCCESS = Status(\"SUCCESS\")\n\n@dataclass\nclass
      Response:\n    status: Status = field(default=PENDING)\n    _reasoning: list[str]
      = field(default_factory=list)\n\n    @property\n    def message(self) -> str:\n
      \       return self._reasoning[-1] if self._reasoning else \"something went
      wrong\"\n\n    def add(self, message: str):\n        self._reasoning.append(message)\n
      \       print(message)\n\n    def failed(self, message: str | None = None)
      -> dict:\n        if message:\n            self.add(message)\n\n        self.status
      = FAILURE\n        return asdict(self)\n\n    def succeeded(self, message:
      str | None = None) -> dict:\n        if message:\n            self.add(message)\n\n
      \       self.status = SUCCESS\n        return asdict(self)\n\ndef format_nested_bullets(data:
      dict, indent: int = 0) -> str:\n    lines = []\n    prefix = \"  \" * indent
      + \"- \"\n\n    if isinstance(data, dict):\n        for key, value in data.items():\n
      \           if isinstance(value, tuple) and isinstance(value[1], dict):\n
      \               # value = (failure_rate, subdict)\n                failure_rate,
      nested = value\n                lines.append(f\"{prefix}{key} ({failure_rate})\")\n
      \               lines.append(format_nested_bullets(nested, indent + 1))\n
      \           elif isinstance(value, (dict, list)):\n                lines.append(f\"{prefix}{key}\")\n
      \               lines.append(format_nested_bullets(value, indent + 1))\n
      \           else:\n                lines.append(f\"{prefix}{key}\")\n    elif
      isinstance(data, list):\n        for item in data:\n            lines.append(f\"{prefix}{item}\")\n
      \   return \"\\n\".join(lines)\n\n\ndef handle(equipment_class: str, canvas_name:
      str, canvas_external_id: str, failure_mode: str) -> dict:\n    \"\"\"Generate
      cause map.\n\n    This function uses equipment_class and failure_mode to generate
      a cause map to be used for root cause analysis.\n    The canvas_name and canvas_external_id
      will be used to populate the canvas.\n\n    Args:\n        equipment_class
      (int): The type of the equipment. This field is optional.\n        canvas_name
      (str): The name of the canvas on which the agent is being used. Use an empty
      string if not available.\n        canvas_external_id (str): The external ID
      of the canvas on which the agent is being used. Use an empty string if not
      available.\n        failure_mode (str): The failure mode for root cause analysis.
      This field is optional.\n\n    Returns:\n        dict: The cause map for the
      given failure mode and equipment class.\n\n    \"\"\"\n\n    start_time = time.time()\n
      \   print(\"Received data:\", equipment_class, canvas_name, canvas_external_id,
      failure_mode)  # Debug print\n\n    response = Response()\n\n    # Fetch json
      as bytes and convert to dict\n    file_node = NodeId(space=DM_SPACE, external_id=\"rca_canvas_builder_cause_maps\")\n
      \   file_bytes = client.files.download_bytes(instance_id=file_node)\n    all_cause_maps
      = json.loads(file_bytes.decode('utf-8'))\n\n    #Fetch for cause map specific
      equipment class\n    cause_map = all_cause_maps.get(f\"cause_map_{equipment_class}\")\n
      \   if not cause_map:\n        return response.failed(\n            f\"Failed
      to load cause map template for Equipment class {equipment_class}\"\n        )\n\n
      \   # Get failure mode data\n    if not failure_mode or failure_mode not in
      cause_map:\n        return response.failed(\n            f\"Provided failure
      mode '{failure_mode}' not found in cause map.\"\n        )\n    \n    root_cause
      = cause_map[failure_mode]\n\n    # Sort mechanisms by Failure Rate (descending)\n
      \   sorted_mechanisms = sorted(\n        root_cause.items(),\n        key=lambda
      item: item[1].get(\"Failure Rate\", 0) if isinstance(item[1], dict) else 0,\n
      \       reverse=True,\n    )\n\n    # Build ordered result without Failure
      Rate at root level\n    ordered_result = OrderedDict()\n    for mech, details
      in sorted_mechanisms:\n        if mech == \"Failure Rate\":\n            continue\n
      \       failure_rate = details.get(\"Failure Rate\", 0) if isinstance(details,
      dict) else 0\n        if isinstance(details, dict):\n            clean_details
      = {k: v for k, v in details.items() if k != \"Failure Rate\"}\n            ordered_result[mech]
      = (f\"{failure_rate:.2f}\", clean_details)\n        else:\n            ordered_result[mech]
      = (f\"{failure_rate:.2f}\", {})\n\n    # Format into nested bullet structure\n
      \   formatted_output = format_nested_bullets(ordered_result)\n\n    return
      response.succeeded(f\"Failure Mode: {failure_mode}\\n\\n{formatted_output}\")"
- name: Find Equipment
  description: "Use this tool to get the equipment details. Filter based on name. Limit
    to 1 closest match. The name of the equipment has to be an exact match. \nYou
    also need to retrieve the equipmentClass field's data in order to find the equipment
    class code"
  type: queryKnowledgeGraph
  configuration:
    dataModels:
    - space: rmdm
      externalId: rmdm
      version: v1
      viewExternalIds:
      - Equipment
    instanceSpaces:
      type: all
- name: Find Failure Notification
  description: "Use this tool to get information about Failure Notification. Filter
    on the equipment field for the equipment retrieved using the find equipment tool.
    Get only the failure notification with the latest \"startTime\" and value of \"priority\"
    == 1 or \"priority\" == 2. Do not sort the priority field. And keep the search
    query empty.\nAlso make sure to fetch the failureMode field value.\nDo not use
    any range filters.\nPerform a list operation."
  type: queryKnowledgeGraph
  configuration:
    dataModels:
    - space: rmdm
      externalId: rmdm
      version: v1
      viewExternalIds:
      - FailureNotification
    instanceSpaces:
      type: all
- name: List Failure Notifications
  description: "Use this tool to get information about Failure Notification. Filter
    on the equipment field for the equipment retrieved using the find equipment tool.
    Get all the failure notifications linked to that equipment. And by looking at
    the \"failureMode\" field, mention the most commonly repeated failure mode details."
  type: queryKnowledgeGraph
  configuration:
    dataModels:
    - space: rmdm
      externalId: rmdm
      version: v1
      viewExternalIds:
      - FailureNotification
    instanceSpaces:
      type: all
- name: Find Failure Mode
  description: "Use this tool to get the \"code\" field of Failure Mode. Use the \"failureMode\"
    space and external id from the Find Failure notification tool to fetch the Failure
    mode. Perform a search operation."
  type: queryKnowledgeGraph
  configuration:
    dataModels:
    - space: rmdm
      externalId: rmdm
      version: v1
      viewExternalIds:
      - FailureMode
    instanceSpaces:
      type: all
- name: Find Equipment Class
  description: "Use this tool to get the \"code\" field of Equipment class. Use the
    \"equipmentClass\" space and external id from the Find Equipment tool to fetch
    the code of the equipment class.  Perform a list operation. The query has to
    be external id and space has to be rmdm_abp."
  type: queryKnowledgeGraph
  configuration:
    dataModels:
    - space: rmdm
      externalId: rmdm
      version: v1
      viewExternalIds:
      - EquipmentClass
    instanceSpaces:
      type: all
